version: '3.8'
services:
  postgres:
  #Specifies the Docker image to use for this service. In this case, 
  #it's using the "postgres:12.0-alpine" image, which is a lightweight PostgreSQL
    image: postgres:12.16-alpine3.18
    container_name: postgres
    #Mounts a volume called "postgres_data" to store the PostgreSQL data files.
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
    #ets environment variables for the PostgreSQL database, 
    #including user, password, database name, and authentication method
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=storedb
      - POSTGRES_HOST_AUTH_METHOD=trust
    expose: 
    #Exposes port 5432 on the container to allow other containers to connect to the PostgreSQL database
      - 5432
    networks:
      - network-standard

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: dn.tandian@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admindb
    ports:
    #Maps port 80 from the host to port 8080 on the container, 
    #allowing access to the pgAdmin web interface.
      - "8080:80"
    networks:
      - network-standard
    links: 
      - postgres
    depends_on:
      - postgres

  fastapi:
    container_name: fastapi
    restart: always
    #Specifies the build context and Dockerfile for building the FastAPI application image.
    image: fastapi-test-local:0.0.1 #tandiand/kubernetes-fastapi
    build:
      context: ./
      dockerfile: Dockerfile
    #name: fastapi-webcGFzc3dvcmQ
    ports:
    #ports: Maps port 5000 from the container to port 80 on the host, 
    #allowing access to the FastAPI application H:C
      - 80:5000
    networks:
      - network-standard
    depends_on:
      - postgres
    links: 
      - postgres

#top level key => allows to mount volumes on host
volumes:
  postgres_data:

networks:
  network-standard:

